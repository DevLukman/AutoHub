generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  role          String     @default("user")
  sessions      Session[]
  accounts      Account[]
  order         Order[]
  purchases     Purchases[]
  wishList      WishList[]
  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Seller {
  id                String       @id @default(cuid())
  sellerId          String       @unique
  businessName      String
  businessEmail     String
  businessPhone     String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  isProfileComplete Boolean      @default(false)
  carList           CarListing[] @relation("PostedCars")

  @@index([sellerId, isProfileComplete])
}

model CarListing {
  id           String     @id @default(cuid())
  listedById   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  make         String
  model        String
  price        Float
  year         Int
  mileage      Float
  condition    String
  location     String
  fuel         String
  transmission String
  category     String
  description  String?
  images       CarImage[]
  status       String     @default("pending")
  vin          String
  listedBy     Seller     @relation("PostedCars", fields: [listedById], references: [sellerId])
  orders       Order?
  wishList     WishList[]

  @@index([make, model, year, location, fuel, transmission, condition, category, status, vin, listedById])
}

model CarImage {
  id        String     @id @default(cuid())
  url       String
  key       String
  name      String
  carId     String
  car       CarListing @relation(fields: [carId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())

  @@index([carId, id])
}

model WishList {
  id           String     @id @default(cuid())
  userId       String
  carListingId String     @unique
  year         Int
  transmission String
  price        Float
  make         String
  model        String
  image        String
  location     String
  mileage      Float
  fuel         String
  createdAt    DateTime   @default(now())
  carListing   CarListing @relation(fields: [carListingId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, carListingId])
}

model Order {
  id            String     @id @default(cuid())
  userId        String
  carListingId  String     @unique
  transactionId String?
  amount        Float
  status        String     @default("pending")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  carListing    CarListing @relation(fields: [carListingId], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, carListingId, status])
}

model Purchases {
  id            String   @id @default(cuid())
  userId        String
  carPurchaseId String
  amount        Float
  model         String
  make          String
  createdAt     DateTime @default(now())
  status        String   @default("completed")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


























