generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  clerkUserId String      @unique
  email       String?
  name        String
  imageUrl    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  order       Order[]
  purchases   Purchases[]
  wishList    WishList[]

  @@index([clerkUserId, email, name])
}

model Seller {
  id                  String       @id @default(uuid())
  sellerId            String       @unique
  businessName        String
  businessEmail       String
  businessPhone       String
  accountNumber       String
  bankName            String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  isProfileComplete   Boolean @default(false)
  carList             CarListing[] @relation("PostedCars")
}

model CarListing {
  id           String     @id @default(uuid())
  listedById   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  make         String
  model        String
  price        Float
  year         Int
  mileage      Float
  condition    String
  location     String
  fuel         String
  transmission String
  category     String
  description  String?
  images       CarImage[]
  status       String     @default("pending")
  vin          String
  listedBy     Seller     @relation("PostedCars", fields: [listedById], references: [sellerId])
  orders       Order?
  wishList     WishList[]
  @@index([make, model, year, location, fuel, transmission, category, status, listedById])
}
model CarImage {
  id          String     @id @default(uuid())
  url         String
  key         String
  name        String
  carId       String
  car         CarListing @relation(fields: [carId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  @@index([carId])
}

model WishList {
  id           String     @id @default(uuid())
  userId       String
  carListingId String      @unique
  year         Int
  transmission String
  price        Float
  make         String
  model        String
  image        String
  location     String
  mileage      Float
  fuel         String
  createdAt    DateTime   @default(now())
  carListing   CarListing @relation(fields: [carListingId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)

  @@index([userId, carListingId])
}

model Order {
  id            String     @id @default(uuid())
  userId        String
  carListingId  String     @unique
  transactionId String?
  amount        Float
  status        String     @default("pending")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  carListing    CarListing @relation(fields: [carListingId], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)

  @@index([userId, carListingId, status])
}

model Purchases {
  id            String   @id @default(uuid())
  userId        String
  carPuchasedId String
  amount        Float
  model         String
  make          String
  createdAt     DateTime @default(now())
  status        String   @default("completed")
  user          User     @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  @@index([userId])
}


