// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  clerkUserId String @unique
  email String?
  name String
  imageUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wishList WishList []
  order Order []
  purchases Purchases []
  @@index([clerkUserId])
}

model Seller {
  id String @id @default(uuid())
  sellerId String @unique  
  businessName String
  businessEmail String
  businessPhoneNumber String
  accountNumber String
  accountName String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carList CarListing[] @relation("PostedCars")

}

model CarListing{
  id String @id @default(uuid())
  listedById String  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  make String
  model String
  price Float
  year Int
  mileage Float
  vin Float
  condition String
  location String
  fuel String
  transmission String
  category String
  description String?
  images String[]
  status String @default("pending")
  listedBy Seller @relation("PostedCars", fields: [listedById], references: [sellerId])
  wishList WishList[]
  orders Order?
  @@index([make, model, year, location, fuel, transmission, category, status])
}

model WishList {
  id String @id @default(uuid())
  userId String 
  carListingId String
  price Float
  make String
  model String
  location String
  mileage Float
  fuel String
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  carListing  CarListing @relation(fields: [carListingId], references: [id], onDelete: Cascade)
  @@index([userId, carListingId])
}

model Order {
  id String @id @default(uuid())
  userId String
  carListingId  String @unique
  transactionId String?
  amount Float
  status String @default("pending")
  createdAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user User @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  carListing CarListing @relation(fields: [carListingId], references: [id], onDelete: Cascade)
  @@index([userId, carListingId, status])
}

model Purchases {
  id String @id @default(uuid())
  userId String
  carPuchasedId String 
  amount Float
  model String
  make String
  createdAt  DateTime  @default(now())
  status String @default("completed")
  user User @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
}